from ZenPacks.community.ConstructionKit.BasicDefinition import *
from ZenPacks.community.ConstructionKit.Construct import *
from Products.ZenModel.IpInterface import *
from Products.ZenModel.IpAddress import *

BASE = "FoundryLB"
VERSION = Version(1, 0, 0)

realIpLink = {'getRealIpLink' : getReferredMethod('Real IP', 'getRealIpLink')}    
realHostLink = {'getRealHostLink' : getReferredMethod('Real Host', 'getRealHostLink') }    
virtualIpLink = {'getVirtualIpLink' : getReferredMethod('Virtual IP', 'getVirtualIpLink')}
virtualHostLink = {'getVirtualHostLink' : getReferredMethod('Virtual Host', 'getVirtualHostLink')}

def setRealDevice(ob,name=''):
    try:
        d = ob.getZenossDevice(ob.snL4RealServerIP)
        ob.realdevice._add(d)
        d.realserver._add(ob)
    except:
        pass

def getRealIpLink(ob):  
    return ob.getIpLink(ob.snL4RealServerIP) 

def getRealHostLink(ob):
    ''' get link to zenoss device'''
    try:
        return ob.realdevice().getDeviceLink()
    except:
        return ob.snL4RealServerName

def setCustomProp(ob, id, value):
    if id == 'setreal':  ob.setRealDevice(value)

def unsetRealDevice(ob):
    ob.realdevice._remoteRemove()
    ob.realdevice._remove()

def removeCustomRelations(ob): 
    ob.unsetRealDevice()
  
def updateCustomRelations(ob):
    ob.unsetRealDevice()
    ob.setRealDevice()

DATA = {
        'version' : VERSION,
        'zenpackbase': BASE,
        'component' : 'snL4RealServer',
        'componentData' : {
                          'singular': 'snL4 Real Server',
                          'plural': 'snL4 Real Servers',
                          'displayed': 'snL4RealServerName', # component field in Event Console
                          'primaryKey': 'snL4RealServerName',
                          'properties': {
                                        'snL4RealServerName' : addProperty('snL4RealServerName'),
                                        'snL4RealServerIP' : addProperty('snL4RealServerIP'),
                                        #'setreal' : addProperty('setRealDevice', default='setRealDevice', ptype='string', isMethod=True, visible=False)
                                        },
                          },
        #'componentMethods' : [ getRealHostLink, getRealIpLink, setCustomProp, 
                               #setRealDevice, unsetRealDevice, 
                               #removeCustomRelations, updateCustomRelations],
        }

#DATA['componentData']['properties'].update(realHostLink)
#DATA['componentData']['properties'].update(realIpLink)

snL4RealServerDefinition = type('snL4RealServerDefinition', (BasicDefinition,), DATA)
snL4RealServerDefinition.relmgr = CustomRelations()
#snL4RealServerDefinition.relmgr.add('realserver', ToOne, 'ZenPacks.community.FoundryLB.snL4RealServer', 
#                                    'realdevice', ToOne, 'Products.ZenModel.Device')


addDefinitionOtherDeviceRelation(snL4RealServerDefinition,
                          'realserver', ToOne, 'ZenPacks.community.FoundryLB.snL4RealServer','snL4RealServerIP',
                          'realdevice',  ToOne, 'Products.ZenModel.Device',
                          "Zenoss Device")

#
#addDefinitionSelfComponentRelation(TerracottaClientDefinition, 'terracottaServers', 
#                          'terracottaclients', ToMany, 'ZenPacks.community.zenTerracotta.TerracottaClient','server',
#                          'terracottaserver',  ToOne, 'ZenPacks.community.zenTerracotta.TerracottaServer', 'server',
#                          "Terracotta Server")
#
#addDefinitionOtherComponentRelation(TerracottaClientDefinition, 'javaApps', 'node',
#                          'terracottaclient', ToOne, 'ZenPacks.community.zenTerracotta.TerracottaClient','nodeport',
#                          'terracottajavaapp',  ToOne, 'ZenPacks.community.zenJavaApp.JavaApp', 'port',
#                          "Java App")


def unsetBinds(ob):
    ob.binds._remoteRemove()
    ob.binds._remove()

def removeCustomRelations(ob):  ob.unsetBinds()

def updateCustomRelations(ob):  ob.unsetBinds()

def getVirtualIpLink(ob): return ob.getIpLink(ob.snL4VirtualServerVirtualIP) 

def setCustomProp(ob, id, value):
    """
    Override from PerpertyManager to handle checks and ip creation
    """
    if id == 'ips':
        ob.setIpAddresses(value)
    if id == 'macaddress':
        ob.index_object()

DATA = {
        'version' : VERSION,
        'zenpackbase': BASE,
        'component' : 'snL4VirtualServer',
        'componentData' : {
                          'singular': 'snL4 Virtual Server',
                          'plural': 'snL4 VirtualServers',
                          'displayed': 'snL4VirtualServerName', # component field in Event Console
                          'primaryKey': 'snL4VirtualServerName',
                          'properties': { 
                                        'snL4VirtualServerName' : addProperty('snL4VirtualServerName','Basic'),
                                        'snL4VirtualServerVirtualIP' : addProperty('snL4VirtualServerVirtualIP','Basic'),
                                        'snL4VirtualServerSDAType' : addProperty('snL4VirtualServerSDAType','Basic'),
                                        },
                          },
        'parentClasses' : [IpInterface],
        'componentMethods' : [getVirtualIpLink, unsetBinds, setCustomProp, removeCustomRelations, updateCustomRelations],
        }

DATA['componentData']['properties'].update(virtualIpLink)

snL4VirtualServerDefinition = type('snL4VirtualServerDefinition', (BasicDefinition,), DATA)
snL4VirtualServerDefinition.relmgr = CustomRelations()
snL4VirtualServerDefinition.relmgr.add('virtualserver', ToOne, "ZenPacks.community.FoundryLB.snL4VirtualServer", 
                                       'ipaddresses', ToMany, "Products.ZenModel.IpAddress")



def getRealHostLink(ob): return ob.realserver().getComponentLink(ob.snL4BindRealServerName)

def getRealIpLink(ob):  return ob.getIpLink(ob.snL4RealServerIP) 

def getVirtualHostLink(ob): return ob.virtualserver().getComponentLink(ob.snL4BindVirtualServerName)

def getVirtualIpLink(ob): return ob.getIpLink(ob.snL4VirtualServerVirtualIP) 

def getRealServer(ob):
    for s in ob.device().os.snL4RealServers():
        if ob.snL4BindRealServerName == s.snL4RealServerName: return s
    return None

def setRealServer(ob, name=''):
    try:
        s = ob.getRealServer()
        ob.realserver._add(s)
        s.binds._add(ob)
    except:
        pass

def getVirtualServer(ob):
    for s in ob.device().os.snL4VirtualServers():
        if ob.snL4BindVirtualServerName == s.snL4VirtualServerName: return s
    return None

def setVirtualServer(ob, name=''):
    try:
        s = ob.getVirtualServer()
        ob.virtualserver._add(s)
        s.binds._add(ob)
    except:
        pass

def unsetBinds(ob):
    ob.realserver._remoteRemove()
    ob.realserver._remove()
    ob.virtualserver._remoteRemove()
    ob.virtualserver._remove()

def removeCustomRelations(ob):  ob.unsetBinds()

def updateCustomRelations(ob):
    ob.unsetBinds()
    ob.setRealServer()
    ob.setVirtualServer()

DATA = {
        'version' : VERSION,
        'zenpackbase': BASE,
        'component' : 'snL4Bind',
        'componentData' : {
                          'singular': 'snL4 Bind',
                          'plural': 'snL4 Binds',
                          'properties': {
                                        'snL4BindRealServerName' : addProperty('snL4BindRealServerName','Basic'),
                                        'snL4BindVirtualServerName' : addProperty('snL4BindVirtualServerName','Basic'),      
                                        'snL4BindRealPortNumber' : addProperty('Real Port','Basic', optional=False, order=4),
                                        'snL4BindVirtualPortNumber' : addProperty('Virtual Port','Basic', optional=False, order=7),
                                        'snL4RealServerIP' : addProperty('snL4RealServerIP','Basic'),
                                        'snL4VirtualServerVirtualIP' : addProperty('snL4VirtualServerVirtualIP','Basic'),
                                        'setreal' : addProperty('setRealServer','Basic','setRealServer', ptype='string', isMethod=True, visible=False),
                                        'setvirtual' : addProperty('setVirtualServer','Basic','setVirtualServer', ptype='string', isMethod=True, visible=False)
                                        },
                          },
        'componentMethods' : [
                              getRealHostLink, getVirtualIpLink, getRealIpLink, getVirtualHostLink, 
                              removeCustomRelations, updateCustomRelations, setCustomProp, 
                              setRealServer, setVirtualServer, getRealServer, getVirtualServer, unsetBinds
                              ],
        'relmgr' : CustomRelations(),
        
        }

DATA['componentData']['properties'].update(realHostLink)
DATA['componentData']['properties'].update(realIpLink)
DATA['componentData']['properties'].update(virtualIpLink)
DATA['componentData']['properties'].update(virtualHostLink)


snL4BindDefinition = type('snL4BindDefinition', (BasicDefinition,), DATA)
snL4BindDefinition.relmgr = CustomRelations()
snL4BindDefinition.relmgr.add('binds', ToMany, "ZenPacks.community.FoundryLB.snL4Bind", 
                              'realserver', ToOne,"ZenPacks.community.FoundryLB.snL4RealServer")
snL4BindDefinition.relmgr.add('binds', ToMany, "ZenPacks.community.FoundryLB.snL4Bind", 
                              'virtualserver', ToOne,"ZenPacks.community.FoundryLB.snL4VirtualServer")

